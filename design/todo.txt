TODOs for next release
======================



| Scope                | up.fragment.abort() | up.render({ abort })  |
----------------------------------------------------------------------
| nothing              | don't call          | false, undefined      |
| current layer        | no args             | 'layer'               |
| element subtree      | Element             | 'target', Element     | new render default
| element subtrees     | [Element] or 'a, b' | [Element] or 'a, b'   | new render default
| all requests         | { layer: 'any' }    | 'all', true           | navigation default
| other layer          | { layer: 'root' }   | not possible          |





Concurrency
-----------

- Consider renaming up.Request#targetElements to just #elements or #fragments
  - However, if we ever wanted to expose this property in up:link:follow (to get a preview of what's being replaced), #elements would be too generic a name
- Can we get rid of excerpt argument now that most aborting happens within up.fragment?
- Introduce new function up.fragment.abort(fragment)
- Rename up.render({ solo }) to up.render({ abort })
  - Use up.fragment.abort() internally
  - Remove { abort: Function } variant
    - Remaining variants are
      - { abort: '.selector' }
      - { abort: [e0, e1, ...] }
      - { abort: element }
      - { abort: true }     // abort all
      - { abort: document } // abort all
      - { abort: 'target' } // was { solo: 'subtree' }, will be expanded to elements before the event is emitted
  - Remove { solo } option from up.request()
    - Deprecation says to use up.network.abort() instead
- Abort validate observers when requests targeting the form are aborted through { solo }
  - We introduced a regression
    - Dirty field with [up-validate], waiting for 1 task
    - User clicks a link to navigate away
    - { solo } does not see anything to abort
    - After 1 task, [up-validate] sends a request, which is now racing against the navigation link
    - Why no test?
  - We could fix this by replacing the request queue with a task queue
    - However, this would be a large refactoring
    - We would need to implement { delay } for tasks/requests
    - We would maybe need to implement microtask/task
  - A simpler solution would be to implement up:fragment:abort
    - Implement an up.fragment.solo(fragment) or up.fragment.abort(fragment) method
    - Event must have { elements } or { fragments } property
    - Event should have #contains(elementOrElements) method to quickly check if something is in solo scope
    - The event should not be abortable itself
    - In up.FormValidator, cancel timer on contained up:fragment:abort instead of up:form:submit
      - Or, remove any dirtySolution if it is in the solo scope
    - Consider doing the same for up.FieldObserver
- Polish form.config options
  - form.config.inputEvent => form.config.observeInputEvent
  - form.config.inputDelay => form.config.observeInputDelay
  - form.config.changeEvent => form.config.observeChangeEvent
  - Remove 'change' from up.form.config.inputEvent
- findGroupTarget(field) must not append :has(...) if the closest selector is the element itself
  - Tests for up.form.groupTarget(field)
  - Tests for up.form.groupTarget(group)
  - Tests for up.form.groupTarget(otherElement)
- Parse and use { disable } while an [up-observe] callback is running
  - We should disable fields without help by the user
  - Strip { disable } from field options passed to observe callback, since we already processed it
  - No up.render() here!
- Support more than one [up-disable] option
  - [up-disable=form] (gleich wie true, kann auch selektor sein)
  - [up-disable=form-group]
  - [up-disable=submit-button]
  - [up-disable=selector]
  - [up-disable=false]
  - Evaluate in up.Change.FromURL
    - Keep logic reusable for disabling during async up.observe() callbacks
- Move mimicLocalRequest() into useCachedRequest()
- Test [up-validate] features
  - Test that we can use [up-validate] with another event and a delay
  - Test that [up-validate] will not make a request if the target is removed while waiting for the delay
  - Test that multiple [up-validate] requests are merged into a single request



Various changes
---------------

- up.form.submitButtons is documented, but not public
- Change abort(reason) to abort({ reason })
  - In up.Queue#abort
  - In up.network.abort()
  - In up.fragment.abort()
  - In up.Request#abort
- Fix clicking on a label[for] when there are elements with duplicate IDs in another layer
- Rendering: allow { scrollBehavior: 'smooth' } when we're not morphing
  - Could we even allow this *when* morphing?
- Scroll behavior should be { behavior: 'instant' }, not 'auto'
- Destruction of observe watches
  - Test that observe watches automatically disappear when the element is detached
  - Test that observe callbacks are not called if the element is detached while waiting for the delay
  - When someone registers an unobserve-function as a destructor, print a message that this is not necessary anymore


Docs
----

- Document that we can use live validation like this:
  <input up-keep up-validate up-observe-event="input">
- Document that multiple [up-validate] requests are merged into a single request
  - Document that X-Up-Validate may contain multiple names
  - Document that X-Up-Validate may contain :unknown
- Document django-forms-dynamic for [up-validate]
  - https://twitter.com/j4mie/status/1471610935924215815?t=KtCISFJXz3kEMoc6C3y4UQ&s=09
  - https://github.com/dabapps/django-forms-dynamic
- Document [up-verify-cache], render({verifyCache}) and up.fragment.config.autoVerifyCache
  - This may be a new caching page
- New observe() and validate() options
  - { feedback, disable, delay, event }
- [up-observe-feedback], [up-observe-disable],  [up-observe-delay],  [up-observe-event]
  - [up-autosubmit] needs a params note saying that that attributes for [up-observe] may be used
  - [up-validate] needs a params note saying that that attributes for [up-observe] may be used
- up.form.config.disable
- up.form.config.inputEvent
- up.form.config.inputDelay
- up.form.config.feedback
- up.form.config.changeEvent
- Consider consolidating docs for
  - input[up-observe]/form[up-observe] as well as
  - input[up-validate]/form[up-validate]
  - input[up-autosubmit]/form[up-autosubmit]
  - ... so it's only "within the container"
- Missing docs for render options
  - { revealTop }
  - { revealMax }
  - { revealPadding }
  - { revealSnap }
  - { scrollBehavior }
    - if we stop auto-set it to auto, otherwise stop parsing this

Maybe
-----

- Consider implementing an abortable up:navigate event
  - This would be the first feature that goes beyond "navigation is just a preset"
  - People might expect history changes to trigger this
  - Maybe think about this more
- Consider renaming "*observe*" to "*watch*"
  - Maybe take this opportunity to change the attribute?
    - <form up-watch up-watch-event="change" up-on-changed="...">
    - up.watch(field, 'change', function() { ... })
    - Keep the callback signature like it is
- Allow to prevent Unpoly's state restoration handling with a preventable up:history:restore
  - We're currently forwarding an event up:history:restore to up:location:changed, but that was never public API
- Replace up.hello() and up.syntax.clean() to MutationObserver()
- Do we want to serialize all actions in a form?
  - up-sequence="form"
  - This would need to abortable on submit => Would be handled by existing { solo: 'subtree' } IF there is a request
  - This would need to abortable on form destroy => Would be handled by existing { solo: 'subtree' } IF there is a request
  - => This would need to be handled by up.Queue, or else there would be nothing to abort
  - => It is not sufficient to have up.form.sequence(..., callback)
  - => We would need to do something like { sequence: ElementOfSubtree }
  - => Before picking a new request, make sure no existing request exists
  - What about our old idea: { order: 'abort target', order: 'abort form', order: 'after form', order: 'after selector' }
      => How to say "after ElementObject" ?
  - Who would fetch the element that is 'form' or 'selector'?
      => up.Change.UpdateLayer#preflightProps(), which already loads targetElements()
  - What would we do if both was given, e.g. { solo: true, sequence: 'form' }
    - Do we forbid the combination?
    - Do we first abort, then do a squence?
    - Do we first wait, then abort? => I think this, but this also means our { solo } handling is in the wrong place. It must move to the queue.
  - Does { sequence: 'form' } also queue local content, like { solo } ?
   - We could do something like up.LocalRequest, but then local updates would no longer be sync!
   - We could not support { sequence } for local updates => YES
  - What about cached content with { sequence }?
    - We could do queue.asapLocal() which immediately executes unless there is { sequence }
  - How does queue resolve a sequence?
    - Before dispatching a request with { sequence }
    - Check if we have *current* requests with { sequence }
    - If any of the other requests's sequence contains our *or* if any other sequence is contained by ours, don't dispatch
- Guard Events for Rendering could have a Promise for "done"
  - Is this better than setting event.renderOptions.onFinished()?
    - Yes, because onFinished may not fire for fatals or prevented up:fragment:loaded
  - How would this work together with future up.RenderRequest?
  - How would this work together with "local changes are sync"?


Long term solution
------------------

- Consolidate [up-validate], [up-switch] and [up-observe] into a tree of form dependencies
- This way we can selectively disable parts of the form


Backlog
=======

- Functionality that checks for isDetached() should probably also check for .up-destroying
- Improve `{ focus: 'keep' }` so it focuses the former form group if we lose focus
  - This may be easier said than done
    - we would need to remember the original form group before the swap in the FocusCapsule
    - re-discover the form group in the new HTML
    - check that the form group is a closer match than target-if-lost
    - come up for a better name for the option (target-if-lost)
- New event up:request:solo ?
- Consider delaying appending of new layer elements until we have constructed all children https://github.com/unpoly/unpoly/discussions/314
- CheapEnergy hatte bedarf auf "[up-validate] on input"
- CheapEnergy hatte bedarf auf "[up-validate] mit delay"
- Publish { onQueued }
  - More canonic would be if up.render() returned a up.RenderRequest, which has abort().
- Wir aborten bereits laufende [up-validate] wenn das Formular submitted, wird, aber laufende Observer-Delays warten können danach noch Dinge tun
  - Wie wäre "submit stoppt das delay"?
  Evtl. Warnung ausbauen: "Will not observe fields without [name]"
- [up-emit] auf Buttons erlauben
- Beim Schließen des Modals prevented jemand up:layer:dismiss, und dann steht "Abort Error: Close event was prevented" in der Konsole.
  - Wollen wir das schlucken?
  - Zumindest bei ui-elementen wie [up-dismiss] ?
- DestructorPass sammelt zwar Exceptions, aber wirft am Ende. Wer fängt das dann? Der Wunsch wäre, dass das drumrumliegende up.destroy() noch zu Ende läuft, dann aber up.CompilerError wirft.
- ConstructorPass sammelt zwar Exceptions, aber wirft am Ende. Wer fängt das dann? Der Wunsch wäre, dass das drumrumliegende up.render() oder up.hello() noch zu Ende läuft, dann aber mit up.CompilerError rejected.
- Update "Long Story" Slides with new API
- Doc page about "Fragments from local HTML"
  - link from [up-document], [up-fragment], [up-content], { document, fragment, content }.
- Warn when registering compiler in [up-] namespace
- Do we need window.history.scrollRestoration = 'manual' ?
  - Is this setting per-state?
